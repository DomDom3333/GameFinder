name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.14
        with:
          versionSpec: '5.x'
      - name: Determine version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.14

  build:
    needs: version
    strategy:
      matrix:
        include:
          - os: windows-latest
            client-runtime: win-x64
            artifact-name: ArcadeMatch.Client-Windows-x64.zip
          - os: ubuntu-latest
            client-runtime: linux-x64
            artifact-name: ArcadeMatch.Client-Linux-x64.zip
          - os: ubuntu-latest
            client-runtime: linux-arm64
            artifact-name: ArcadeMatch.Client-Linux-ARM64.zip
          - os: ubuntu-latest
            client-runtime: linux-arm
            artifact-name: ArcadeMatch.Client-Linux-ARM.zip
          - os: ubuntu-latest
            client-runtime: linux-musl-x64
            artifact-name: ArcadeMatch.Client-Linux-Alpine-x64.zip
          - os: ubuntu-latest
            client-runtime: linux-musl-arm64
            artifact-name: ArcadeMatch.Client-Linux-Alpine-ARM64.zip
          - os: macos-13
            client-runtime: osx-x64
            artifact-name: ArcadeMatch.Client-macOS-Intel.zip
          - os: macos-latest
            client-runtime: osx-arm64
            artifact-name: ArcadeMatch.Client-macOS-AppleSilicon.zip
    runs-on: ${{ matrix.os }}
    env:
      VERSION: ${{ needs.version.outputs.semVer }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x
      - name: Restore dependencies
        shell: bash
        run: |
          dotnet restore ArcadeMatch.Avalonia/ArcadeMatch.Avalonia.csproj
          dotnet restore SteamCookieFetcher/SteamCookieFetcher.csproj
      - name: Publish client
        shell: bash
        run: |
          dotnet publish ArcadeMatch.Avalonia/ArcadeMatch.Avalonia.csproj -c Release -r ${{ matrix.client-runtime }} --self-contained true -p:Version=$VERSION -o publish/ArcadeMatch.Client
          dotnet publish SteamCookieFetcher/SteamCookieFetcher.csproj -c Release -r ${{ matrix.client-runtime }} --self-contained true -p:Version=$VERSION -o publish/ArcadeMatch.Client/SteamCookieFetcher
      - name: Create client zip (Windows)
        if: matrix.os == 'windows-latest'
        run: Compress-Archive -Path publish\ArcadeMatch.Client\* -DestinationPath ${{ matrix.artifact-name }}
      - name: Create client zip (Unix)
        if: matrix.os != 'windows-latest'
        run: cd publish/ArcadeMatch.Client && zip -r ../../${{ matrix.artifact-name }} *
      - uses: actions/upload-artifact@v4
        with:
          name: client-${{ matrix.client-runtime }}
          path: ${{ matrix.artifact-name }}

  build-server:
    needs: version
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.version.outputs.semVer }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x
      - name: Restore dependencies
        run: dotnet restore ArcadeMatch.Server/ArcadeMatch.Server.csproj
      - name: Publish server
        run: |
          dotnet publish ArcadeMatch.Server/ArcadeMatch.Server.csproj -c Release -r win-x64 --self-contained true -p:Version=$VERSION -o publish/ArcadeMatch.Server/win-x64
          dotnet publish ArcadeMatch.Server/ArcadeMatch.Server.csproj -c Release -r linux-x64 --self-contained true -p:Version=$VERSION -o publish/ArcadeMatch.Server/linux-x64
          dotnet publish ArcadeMatch.Server/ArcadeMatch.Server.csproj -c Release -r linux-arm64 --self-contained true -p:Version=$VERSION -o publish/ArcadeMatch.Server/linux-arm64
          dotnet publish ArcadeMatch.Server/ArcadeMatch.Server.csproj -c Release -r linux-arm --self-contained true -p:Version=$VERSION -o publish/ArcadeMatch.Server/linux-arm
          dotnet publish ArcadeMatch.Server/ArcadeMatch.Server.csproj -c Release -r linux-musl-x64 --self-contained true -p:Version=$VERSION -o publish/ArcadeMatch.Server/linux-musl-x64
          dotnet publish ArcadeMatch.Server/ArcadeMatch.Server.csproj -c Release -r linux-musl-arm64 --self-contained true -p:Version=$VERSION -o publish/ArcadeMatch.Server/linux-musl-arm64
          dotnet publish ArcadeMatch.Server/ArcadeMatch.Server.csproj -c Release -r osx-x64 --self-contained true -p:Version=$VERSION -o publish/ArcadeMatch.Server/osx-x64
          dotnet publish ArcadeMatch.Server/ArcadeMatch.Server.csproj -c Release -r osx-arm64 --self-contained true -p:Version=$VERSION -o publish/ArcadeMatch.Server/osx-arm64
      - name: Create server zip files
        run: |
          cd publish/ArcadeMatch.Server/win-x64 && zip -r ../../../ArcadeMatch.Server-Windows-x64.zip * && cd ../../..
          cd publish/ArcadeMatch.Server/linux-x64 && zip -r ../../../ArcadeMatch.Server-Linux-x64.zip * && cd ../../..
          cd publish/ArcadeMatch.Server/linux-arm64 && zip -r ../../../ArcadeMatch.Server-Linux-ARM64.zip * && cd ../../..
          cd publish/ArcadeMatch.Server/linux-arm && zip -r ../../../ArcadeMatch.Server-Linux-ARM.zip * && cd ../../..
          cd publish/ArcadeMatch.Server/linux-musl-x64 && zip -r ../../../ArcadeMatch.Server-Linux-Alpine-x64.zip * && cd ../../..
          cd publish/ArcadeMatch.Server/linux-musl-arm64 && zip -r ../../../ArcadeMatch.Server-Linux-Alpine-ARM64.zip * && cd ../../..
          cd publish/ArcadeMatch.Server/osx-x64 && zip -r ../../../ArcadeMatch.Server-macOS-Intel.zip * && cd ../../..
          cd publish/ArcadeMatch.Server/osx-arm64 && zip -r ../../../ArcadeMatch.Server-macOS-AppleSilicon.zip * && cd ../../..
      - uses: actions/upload-artifact@v4
        with:
          name: server-artifacts
          path: |
            ArcadeMatch.Server-Windows-x64.zip
            ArcadeMatch.Server-Linux-x64.zip
            ArcadeMatch.Server-Linux-ARM64.zip
            ArcadeMatch.Server-Linux-ARM.zip
            ArcadeMatch.Server-Linux-Alpine-x64.zip
            ArcadeMatch.Server-Linux-Alpine-ARM64.zip
            ArcadeMatch.Server-macOS-Intel.zip
            ArcadeMatch.Server-macOS-AppleSilicon.zip

  image:
    needs: version
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      VERSION: ${{ needs.version.outputs.semVer }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set lowercase repository
        run: echo "REPOSITORY=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ArcadeMatch.Server/Dockerfile
          push: true
          tags: ghcr.io/${{ env.REPOSITORY }}:v${{ env.VERSION }}

  release:
    needs: [build, build-server, image, version]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/download-artifact@v4
        with:
          pattern: '*'
          merge-multiple: true
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version.outputs.semVer }}
          name: Release v${{ needs.version.outputs.semVer }}
          files: |
            ArcadeMatch.Client-Windows-x64.zip
            ArcadeMatch.Client-Linux-x64.zip
            ArcadeMatch.Client-Linux-ARM64.zip
            ArcadeMatch.Client-Linux-ARM.zip
            ArcadeMatch.Client-Linux-Alpine-x64.zip
            ArcadeMatch.Client-Linux-Alpine-ARM64.zip
            ArcadeMatch.Client-macOS-Intel.zip
            ArcadeMatch.Client-macOS-AppleSilicon.zip
            ArcadeMatch.Server-Windows-x64.zip
            ArcadeMatch.Server-Linux-x64.zip
            ArcadeMatch.Server-Linux-ARM64.zip
            ArcadeMatch.Server-Linux-ARM.zip
            ArcadeMatch.Server-Linux-Alpine-x64.zip
            ArcadeMatch.Server-Linux-Alpine-ARM64.zip
            ArcadeMatch.Server-macOS-Intel.zip
            ArcadeMatch.Server-macOS-AppleSilicon.zip
